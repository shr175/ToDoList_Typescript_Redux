{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  tasks: []\n};\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"Submit_Task\"] = \"Submit Task\";\n  ActionTypes[\"Delete_Task\"] = \"Delete Task\";\n})(ActionTypes || (ActionTypes = {}));\n\nconst submitTask = submit => ({\n  type: ActionTypes.Submit_Task,\n  payload: {\n    submit\n  }\n});\n\nconst deleteTask = deleteTask => ({\n  type: ActionTypes.Delete_Task,\n  payload: {\n    deleteTask\n  }\n});\n\nconst addToTaskReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log;\n\n  switch (action.type) {\n    case submitTask:\n      {\n        console.log(\"entered in switch case submit_task\");\n        return {\n          tasks: [...state.tasks, action.submit_task]\n        };\n      }\n\n    case deleteTask:\n      {\n        const updatedTasks = [];\n        state.tasks.forEach(task => {\n          if (task.id !== action.delete_task.id) {\n            updatedTasks.push(task);\n          }\n        });\n        return {\n          tasks: updatedTasks\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst store = configureStore({\n  reducer: {\n    addToTaskReducer\n  }\n});\nexport default store; //.........................................\n// import { configureStore } from \"@reduxjs/toolkit\";\n// interface tasksType {\n//   id: number;\n//   // title: string;\n// }\n// interface stateInterface {\n//   tasks: Array<tasksType>;\n// }\n// const initialState: stateInterface = {\n//   tasks: [],\n// };\n// interface ActionA {\n//   type: \"submit_task\";\n//   submit_task: string;\n// }\n// interface deleteInt {\n//   id: number;\n// }\n// interface ActionB {\n//   type: \"delete_task\";\n//   delete_task: deleteInt;\n// }\n// type Action = ActionA | ActionB;\n// const addToTaskReducer = (state = initialState, action: Action) => {\n//   switch (action.type) {\n//     case \"submit_task\": {\n//       return { tasks: [...state.tasks, action.submit_task] };\n//     }\n//     case \"delete_task\": {\n//       const updatedTasks = [] as Array<tasksType>;\n//       state.tasks.forEach((task: tasksType) => {\n//         if (task.id !== action.delete_task.id) {\n//           updatedTasks.push(task);\n//         }\n//       });\n//       return { tasks: updatedTasks };\n//     }\n//     // case 'update_task':{\n//     //     return {tasks: [...state.tasks[action.payload],action.payload]};\n//     // }\n//     default:\n//       return state;\n//   }\n// };\n// interface reducerAct {\n//   // type : \"submit_task\"\n// }\n// export const actions = addToTaskReducer.actions;\n// const store = configureStore({\n//   reducer: {\n//     addToTaskReducer,\n//   },\n// });\n// export default store;","map":{"version":3,"names":["configureStore","initialState","tasks","ActionTypes","submitTask","submit","type","Submit_Task","payload","deleteTask","Delete_Task","addToTaskReducer","state","action","console","log","submit_task","updatedTasks","forEach","task","id","delete_task","push","store","reducer"],"sources":["/Users/shreyanayak/Desktop/All React App/shreya/ToDoList_Typescript_Redux/src/store/stores.tsx"],"sourcesContent":["\nimport { configureStore } from \"@reduxjs/toolkit\";\n\ninterface tasksType {\n  id: number;\n}\n\ninterface stateInterface {\n  tasks: Array<tasksType>;\n}\n\nconst initialState: stateInterface = {\n  tasks: [],\n};\n\nenum ActionTypes {\n  Submit_Task = \"Submit Task\",\n  Delete_Task = \"Delete Task\",\n}\n\nconst submitTask = (submit:submit_Task)=> ({\n\ttype: ActionTypes.Submit_Task,\n\tpayload: { submit },\n});\n\ninterface DeleteTask {\n  type : string,\n  id : number,\n\n}\n\n const deleteTask = (deleteTask:DeleteTask) => ({\n\ttype: ActionTypes.Delete_Task,\n\tpayload: {deleteTask},\n});\n\ninterface submit_Task {\n type : string,\n} \n\nconst addToTaskReducer = (state = initialState, action: any) : stateInterface=> {\n  console.log\n  switch (action.type) {\n    case submitTask: {\n      console.log(\"entered in switch case submit_task\")\n      return { tasks: [...state.tasks, action.submit_task] };\n    }\n\n    case deleteTask: {\n      const updatedTasks = [] as Array<tasksType>;\n      state.tasks.forEach((task: tasksType) => {\n        if (task.id !== action.delete_task.id) {\n          updatedTasks.push(task);\n        }\n      });\n\n      return { tasks: updatedTasks };\n    }\n\n   \n    default:\n      return state;\n  }\n};\n\n\n\nconst store = configureStore({\n  reducer: {\n    addToTaskReducer,\n  },\n});\n\nexport default store;\n\n\n\n\n\n\n\n//.........................................\n\n// import { configureStore } from \"@reduxjs/toolkit\";\n\n// interface tasksType {\n//   id: number;\n//   // title: string;\n// }\n\n// interface stateInterface {\n//   tasks: Array<tasksType>;\n// }\n\n// const initialState: stateInterface = {\n//   tasks: [],\n// };\n \n// interface ActionA {\n//   type: \"submit_task\";\n//   submit_task: string;\n// }\n// interface deleteInt {\n//   id: number;\n// }\n// interface ActionB {\n//   type: \"delete_task\";\n//   delete_task: deleteInt;\n// }\n\n// type Action = ActionA | ActionB;\n\n// const addToTaskReducer = (state = initialState, action: Action) => {\n//   switch (action.type) {\n//     case \"submit_task\": {\n//       return { tasks: [...state.tasks, action.submit_task] };\n//     }\n\n//     case \"delete_task\": {\n//       const updatedTasks = [] as Array<tasksType>;\n//       state.tasks.forEach((task: tasksType) => {\n//         if (task.id !== action.delete_task.id) {\n//           updatedTasks.push(task);\n//         }\n//       });\n\n//       return { tasks: updatedTasks };\n//     }\n\n//     // case 'update_task':{\n//     //     return {tasks: [...state.tasks[action.payload],action.payload]};\n\n//     // }\n\n//     default:\n//       return state;\n//   }\n// };\n\n// interface reducerAct {\n\n//   // type : \"submit_task\"\n\n\n\n// }\n\n// export const actions = addToTaskReducer.actions;\n\n// const store = configureStore({\n//   reducer: {\n//     addToTaskReducer,\n//   },\n// });\n\n// export default store;\n\n\n\n"],"mappings":"AACA,SAASA,cAAT,QAA+B,kBAA/B;AAUA,MAAMC,YAA4B,GAAG;EACnCC,KAAK,EAAE;AAD4B,CAArC;IAIKC,W;;WAAAA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAKL,MAAMC,UAAU,GAAIC,MAAD,KAAwB;EAC1CC,IAAI,EAAEH,WAAW,CAACI,WADwB;EAE1CC,OAAO,EAAE;IAAEH;EAAF;AAFiC,CAAxB,CAAnB;;AAWC,MAAMI,UAAU,GAAIA,UAAD,KAA4B;EAC/CH,IAAI,EAAEH,WAAW,CAACO,WAD6B;EAE/CF,OAAO,EAAE;IAACC;EAAD;AAFsC,CAA5B,CAAnB;;AASD,MAAME,gBAAgB,GAAG,YAAuD;EAAA,IAAtDC,KAAsD,uEAA9CX,YAA8C;EAAA,IAAhCY,MAAgC;EAC9EC,OAAO,CAACC,GAAR;;EACA,QAAQF,MAAM,CAACP,IAAf;IACE,KAAKF,UAAL;MAAiB;QACfU,OAAO,CAACC,GAAR,CAAY,oCAAZ;QACA,OAAO;UAAEb,KAAK,EAAE,CAAC,GAAGU,KAAK,CAACV,KAAV,EAAiBW,MAAM,CAACG,WAAxB;QAAT,CAAP;MACD;;IAED,KAAKP,UAAL;MAAiB;QACf,MAAMQ,YAAY,GAAG,EAArB;QACAL,KAAK,CAACV,KAAN,CAAYgB,OAAZ,CAAqBC,IAAD,IAAqB;UACvC,IAAIA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACQ,WAAP,CAAmBD,EAAnC,EAAuC;YACrCH,YAAY,CAACK,IAAb,CAAkBH,IAAlB;UACD;QACF,CAJD;QAMA,OAAO;UAAEjB,KAAK,EAAEe;QAAT,CAAP;MACD;;IAGD;MACE,OAAOL,KAAP;EAnBJ;AAqBD,CAvBD;;AA2BA,MAAMW,KAAK,GAAGvB,cAAc,CAAC;EAC3BwB,OAAO,EAAE;IACPb;EADO;AADkB,CAAD,CAA5B;AAMA,eAAeY,KAAf,C,CAQA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}